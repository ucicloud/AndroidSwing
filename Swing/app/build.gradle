apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.butterknife'

def supportVersion = "25.3.0"

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.kidsdynamic.swing"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        rootProject.ext.variantRelease = false //default in debug mode
    }
    signingConfigs {
        debug {
        }
        release {
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "API_BASE_URL", releaseApiBaseUrl
            buildConfigField "String", "PHOTO_BASE_URL", releasePhotoBaseUrl

            signingConfig signingConfigs.release
        }

        debug{
            buildConfigField "String", "API_BASE_URL", devApiBaseUrl
            buildConfigField "String", "PHOTO_BASE_URL", devPhotoBaseUrl

            signingConfig signingConfigs.debug
        }
    }

    lintOptions{
        abortOnError false
    }

    // Rename file name of APK which is built by Android Studio
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "Swing" +
                        "_v" + defaultConfig.versionName +
                        "_build" + defaultConfig.versionCode +
                        "_" + packageTime() +
                        "_" + buildType.name +
                        ".apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

def static packageTime() {
    return new Date().format('yyyyMMdd', TimeZone.getTimeZone("UTC"))
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "com.jakewharton:butterknife:$rootProject.butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterKnifeVersion"

    compile 'com.android.support:appcompat-v7:' + supportVersion
    compile 'com.android.support:support-v4:' + supportVersion
    compile 'com.android.support:design:' + supportVersion

    compile 'com.prolificinteractive:material-calendarview:1.4.3'
    compile 'com.github.alamkanak:android-week-view:1.2.6'
    compile 'com.github.bumptech.glide:glide:4.2.0'
    compile 'cn.carbs.android:AvatarImageView:1.0.4'
    compile 'com.wdullaer:materialdatetimepicker:3.2.2'

    compile project(':data')
    compile project(':htttp')
    compile project(path: ':base')
    compile project(':baseble')
}

//强制所有lib使用相同的support库
//https://stackoverflow.com/questions/42949974/android-support-repo-46-0-0-with-android-studio-2-3/42957234#42957234
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion supportVersion
            }
        }
    }
}

//尝试解决根据配置打包地址问题
//https://stackoverflow.com/questions/20176284/buildconfig-debug-always-false-when-building-library-projects-with-gradle
/*project.afterEvaluate {
    tasks.all{task->
        if(task.name =~/check.*Manifest/){
            if(task.name =~/[dD]ebug/){
                task.dependsOn(onDebugTypeTriggered)
            }else{
                task.dependsOn(onReleaseTypeTriggered)
            }
        }
    }
}

task onDebugTypeTriggered << {
    rootProject.ext.variantRelease = false
}

task onReleaseTypeTriggered << {
    rootProject.ext.variantRelease = true
}*/

// Read signingConfigs
File proFile = file('signing.properties');
if (proFile.exists()) {
    Properties props = new Properties();
    props.load(new FileInputStream((proFile)))
    // Debug
    if (props.containsKey('DEBUG_STORE_FILE_PATH')) {
        android.signingConfigs.debug.storeFile = file(props['DEBUG_STORE_FILE_PATH'])
    } else {
        android.buildTypes.debug.signingConfig = null
    }
    // Release
    if (props.containsKey('RELEASE_STORE_FILE_PATH') && props.containsKey('RELEASE_STORE_PASSWORD') &&
            props.containsKey('RELEASE_KEY_ALIAS') && props.containsKey('RELEASE_KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['RELEASE_STORE_FILE_PATH'])
        android.signingConfigs.release.storePassword = props['RELEASE_STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['RELEASE_KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.debug.signingConfig = null
    android.buildTypes.release.signingConfig = null
}