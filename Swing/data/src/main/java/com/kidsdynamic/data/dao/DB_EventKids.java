package com.kidsdynamic.data.dao;

import com.kidsdynamic.data.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "t_event_kids".
 */
public class DB_EventKids {

    private Long id;
    private long kidsId;
    private String name;
    private String macId;
    private String firmwareVersion;
    private String profile;
    private Long dateCreated;
    private Long lastUpdate;
    private Long eventId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EventKidsDao myDao;

    private DB_Event dB_Event;
    private Long dB_Event__resolvedKey;


    public DB_EventKids() {
    }

    public DB_EventKids(Long id) {
        this.id = id;
    }

    public DB_EventKids(Long id, Long kidsId, String name, String macId, String firmwareVersion, String profile, Long dateCreated, Long lastUpdate, Long eventId) {
        this.id = id;
        this.kidsId = kidsId;
        this.name = name;
        this.macId = macId;
        this.firmwareVersion = firmwareVersion;
        this.profile = profile;
        this.dateCreated = dateCreated;
        this.lastUpdate = lastUpdate;
        this.eventId = eventId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEventKidsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public long getKidsId() {
        return kidsId;
    }

    public void setKidsId(long kidsId) {
        this.kidsId = kidsId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getMacId() {
        return macId;
    }

    public void setMacId(String macId) {
        this.macId = macId;
    }

    public String getFirmwareVersion() {
        return firmwareVersion;
    }

    public void setFirmwareVersion(String firmwareVersion) {
        this.firmwareVersion = firmwareVersion;
    }

    public String getProfile() {
        return profile;
    }

    public void setProfile(String profile) {
        this.profile = profile;
    }

    public Long getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Long dateCreated) {
        this.dateCreated = dateCreated;
    }

    public Long getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(Long lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    /** To-one relationship, resolved on first access. */
    public DB_Event getDB_Event() {
        Long __key = this.eventId;
        if (dB_Event__resolvedKey == null || !dB_Event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            DB_Event dB_EventNew = targetDao.load(__key);
            synchronized (this) {
                dB_Event = dB_EventNew;
            	dB_Event__resolvedKey = __key;
            }
        }
        return dB_Event;
    }

    public void setDB_Event(DB_Event dB_Event) {
        synchronized (this) {
            this.dB_Event = dB_Event;
            eventId = dB_Event == null ? null : dB_Event.getEventId();
            dB_Event__resolvedKey = eventId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
