package com.kidsdynamic.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kidsdynamic.data.dao.DB_RawActivity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_raw_activity".
*/
public class RawActivityDao extends AbstractDao<DB_RawActivity, Long> {

    public static final String TABLENAME = "t_raw_activity";

    /**
     * Properties of entity DB_RawActivity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IndoorActivity = new Property(1, String.class, "indoorActivity", false, "indoor_activity");
        public final static Property OutdoorActivity = new Property(2, String.class, "outdoorActivity", false, "outdoor_activity");
        public final static Property TimeZoneOffset = new Property(3, Integer.class, "timeZoneOffset", false, "timeZoneOffset");
        public final static Property Time = new Property(4, Long.class, "time", false, "time");
        public final static Property MacId = new Property(5, String.class, "macId", false, "macId");
    };


    public RawActivityDao(DaoConfig config) {
        super(config);
    }
    
    public RawActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_raw_activity\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"indoor_activity\" TEXT NOT NULL ," + // 1: indoorActivity
                "\"outdoor_activity\" TEXT," + // 2: outdoorActivity
                "\"timeZoneOffset\" INTEGER," + // 3: timeZoneOffset
                "\"time\" INTEGER," + // 4: time
                "\"macId\" TEXT);"); // 5: macId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_raw_activity\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DB_RawActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIndoorActivity());
 
        String outdoorActivity = entity.getOutdoorActivity();
        if (outdoorActivity != null) {
            stmt.bindString(3, outdoorActivity);
        }
 
        Integer timeZoneOffset = entity.getTimeZoneOffset();
        if (timeZoneOffset != null) {
            stmt.bindLong(4, timeZoneOffset);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        String macId = entity.getMacId();
        if (macId != null) {
            stmt.bindString(6, macId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DB_RawActivity readEntity(Cursor cursor, int offset) {
        DB_RawActivity entity = new DB_RawActivity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // indoorActivity
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // outdoorActivity
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // timeZoneOffset
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // macId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DB_RawActivity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndoorActivity(cursor.getString(offset + 1));
        entity.setOutdoorActivity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeZoneOffset(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setMacId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DB_RawActivity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DB_RawActivity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
