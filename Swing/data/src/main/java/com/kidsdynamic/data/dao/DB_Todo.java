package com.kidsdynamic.data.dao;

import com.kidsdynamic.data.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "t_todo".
 */
public class DB_Todo {

    private long todoId;
    private String text;
    private String status;
    private Long dateCreated;
    private Long lastUpdated;
    private Long eventId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TodoDao myDao;

    private DB_Event dB_Event;
    private Long dB_Event__resolvedKey;


    public DB_Todo() {
    }

    public DB_Todo(long todoId) {
        this.todoId = todoId;
    }

    public DB_Todo(long todoId, String text, String status, Long dateCreated, Long lastUpdated, Long eventId) {
        this.todoId = todoId;
        this.text = text;
        this.status = status;
        this.dateCreated = dateCreated;
        this.lastUpdated = lastUpdated;
        this.eventId = eventId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTodoDao() : null;
    }

    public long getTodoId() {
        return todoId;
    }

    public void setTodoId(long todoId) {
        this.todoId = todoId;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Long getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Long dateCreated) {
        this.dateCreated = dateCreated;
    }

    public Long getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(Long lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    /** To-one relationship, resolved on first access. */
    public DB_Event getDB_Event() {
        Long __key = this.eventId;
        if (dB_Event__resolvedKey == null || !dB_Event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            DB_Event dB_EventNew = targetDao.load(__key);
            synchronized (this) {
                dB_Event = dB_EventNew;
            	dB_Event__resolvedKey = __key;
            }
        }
        return dB_Event;
    }

    public void setDB_Event(DB_Event dB_Event) {
        synchronized (this) {
            this.dB_Event = dB_Event;
            eventId = dB_Event == null ? null : dB_Event.getEventId();
            dB_Event__resolvedKey = eventId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
