package com.kidsdynamic.data.dao;

import com.kidsdynamic.data.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "t_kids".
 */
public class DB_Kids {

    private int kidsId;
    private String name;
    private String dateCreated;
    private String macId;
    private String firmwareVersion;
    private String profile;
    private String state;
    private Integer parentId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient KidsDao myDao;

    private DB_User dB_User;
    private Integer dB_User__resolvedKey;


    public DB_Kids() {
    }

    public DB_Kids(int kidsId) {
        this.kidsId = kidsId;
    }

    public DB_Kids(int kidsId, String name, String dateCreated, String macId, String firmwareVersion, String profile, String state, Integer parentId) {
        this.kidsId = kidsId;
        this.name = name;
        this.dateCreated = dateCreated;
        this.macId = macId;
        this.firmwareVersion = firmwareVersion;
        this.profile = profile;
        this.state = state;
        this.parentId = parentId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getKidsDao() : null;
    }

    public int getKidsId() {
        return kidsId;
    }

    public void setKidsId(int kidsId) {
        this.kidsId = kidsId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public String getMacId() {
        return macId;
    }

    public void setMacId(String macId) {
        this.macId = macId;
    }

    public String getFirmwareVersion() {
        return firmwareVersion;
    }

    public void setFirmwareVersion(String firmwareVersion) {
        this.firmwareVersion = firmwareVersion;
    }

    public String getProfile() {
        return profile;
    }

    public void setProfile(String profile) {
        this.profile = profile;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Integer getParentId() {
        return parentId;
    }

    public void setParentId(Integer parentId) {
        this.parentId = parentId;
    }

    /** To-one relationship, resolved on first access. */
    public DB_User getDB_User() {
        Integer __key = this.parentId;
        if (dB_User__resolvedKey == null || !dB_User__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            DB_User dB_UserNew = targetDao.load(__key);
            synchronized (this) {
                dB_User = dB_UserNew;
            	dB_User__resolvedKey = __key;
            }
        }
        return dB_User;
    }

    public void setDB_User(DB_User dB_User) {
        synchronized (this) {
            this.dB_User = dB_User;
            parentId = dB_User == null ? null : dB_User.getUserId();
            dB_User__resolvedKey = parentId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
