package com.kidsdynamic.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_activity_format".
*/
public class FormatActivityDao extends AbstractDao<DB_FormatActivity, Long> {

    public static final String TABLENAME = "t_activity_format";

    /**
     * Properties of entity DB_FormatActivity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ActvId = new Property(1, Long.class, "actvId", false, "actv_id");
        public final static Property IndoorId = new Property(2, Long.class, "indoorId", false, "indoor_id");
        public final static Property IndoorSteps = new Property(3, Long.class, "indoorSteps", false, "indoor_steps");
        public final static Property OutdoorId = new Property(4, Long.class, "outdoorId", false, "outdoor_id");
        public final static Property OutdoorSteps = new Property(5, Long.class, "outdoorSteps", false, "outdoor_steps");
        public final static Property MacId = new Property(6, String.class, "macId", false, "macId");
        public final static Property KidId = new Property(7, String.class, "kidId", false, "kidId");
        public final static Property Distance = new Property(8, Long.class, "distance", false, "distance");
        public final static Property Time = new Property(9, Long.class, "time", false, "time");
    };


    public FormatActivityDao(DaoConfig config) {
        super(config);
    }
    
    public FormatActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_activity_format\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"actv_id\" INTEGER," + // 1: actvId
                "\"indoor_id\" INTEGER," + // 2: indoorId
                "\"indoor_steps\" INTEGER," + // 3: indoorSteps
                "\"outdoor_id\" INTEGER," + // 4: outdoorId
                "\"outdoor_steps\" INTEGER," + // 5: outdoorSteps
                "\"macId\" TEXT," + // 6: macId
                "\"kidId\" TEXT," + // 7: kidId
                "\"distance\" INTEGER," + // 8: distance
                "\"time\" INTEGER);"); // 9: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_activity_format\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DB_FormatActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long actvId = entity.getActvId();
        if (actvId != null) {
            stmt.bindLong(2, actvId);
        }
 
        Long indoorId = entity.getIndoorId();
        if (indoorId != null) {
            stmt.bindLong(3, indoorId);
        }
 
        Long indoorSteps = entity.getIndoorSteps();
        if (indoorSteps != null) {
            stmt.bindLong(4, indoorSteps);
        }
 
        Long outdoorId = entity.getOutdoorId();
        if (outdoorId != null) {
            stmt.bindLong(5, outdoorId);
        }
 
        Long outdoorSteps = entity.getOutdoorSteps();
        if (outdoorSteps != null) {
            stmt.bindLong(6, outdoorSteps);
        }
 
        String macId = entity.getMacId();
        if (macId != null) {
            stmt.bindString(7, macId);
        }
 
        String kidId = entity.getKidId();
        if (kidId != null) {
            stmt.bindString(8, kidId);
        }
 
        Long distance = entity.getDistance();
        if (distance != null) {
            stmt.bindLong(9, distance);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(10, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DB_FormatActivity readEntity(Cursor cursor, int offset) {
        DB_FormatActivity entity = new DB_FormatActivity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // actvId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // indoorId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // indoorSteps
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // outdoorId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // outdoorSteps
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // macId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // kidId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // distance
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DB_FormatActivity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActvId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIndoorId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIndoorSteps(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setOutdoorId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setOutdoorSteps(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMacId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKidId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDistance(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DB_FormatActivity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DB_FormatActivity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
