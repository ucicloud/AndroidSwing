package com.kidsdynamic.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kidsdynamic.data.dao.DB_CloudActivity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_activity_cloud".
*/
public class CloudActivityDao extends AbstractDao<DB_CloudActivity, Long> {

    public static final String TABLENAME = "t_activity_cloud";

    /**
     * Properties of entity DB_CloudActivity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ActvId = new Property(0, Long.class, "actvId", true, "actv_id");
        public final static Property MacId = new Property(1, String.class, "macId", false, "macId");
        public final static Property KidId = new Property(2, String.class, "kidId", false, "kidId");
        public final static Property Type = new Property(3, String.class, "type", false, "type");
        public final static Property Steps = new Property(4, Long.class, "steps", false, "steps");
        public final static Property Distance = new Property(5, Long.class, "distance", false, "distance");
        public final static Property ReceivedDate = new Property(6, Long.class, "receivedDate", false, "receivedDate");
    };


    public CloudActivityDao(DaoConfig config) {
        super(config);
    }
    
    public CloudActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_activity_cloud\" (" + //
                "\"actv_id\" INTEGER PRIMARY KEY ," + // 0: actvId
                "\"macId\" TEXT," + // 1: macId
                "\"kidId\" TEXT," + // 2: kidId
                "\"type\" TEXT," + // 3: type
                "\"steps\" INTEGER," + // 4: steps
                "\"distance\" INTEGER," + // 5: distance
                "\"receivedDate\" INTEGER);"); // 6: receivedDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_activity_cloud\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DB_CloudActivity entity) {
        stmt.clearBindings();
 
        Long actvId = entity.getActvId();
        if (actvId != null) {
            stmt.bindLong(1, actvId);
        }
 
        String macId = entity.getMacId();
        if (macId != null) {
            stmt.bindString(2, macId);
        }
 
        String kidId = entity.getKidId();
        if (kidId != null) {
            stmt.bindString(3, kidId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        Long steps = entity.getSteps();
        if (steps != null) {
            stmt.bindLong(5, steps);
        }
 
        Long distance = entity.getDistance();
        if (distance != null) {
            stmt.bindLong(6, distance);
        }
 
        Long receivedDate = entity.getReceivedDate();
        if (receivedDate != null) {
            stmt.bindLong(7, receivedDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DB_CloudActivity readEntity(Cursor cursor, int offset) {
        DB_CloudActivity entity = new DB_CloudActivity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // actvId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // macId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kidId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // steps
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // distance
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // receivedDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DB_CloudActivity entity, int offset) {
        entity.setActvId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMacId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKidId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSteps(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDistance(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setReceivedDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DB_CloudActivity entity, long rowId) {
        entity.setActvId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DB_CloudActivity entity) {
        if(entity != null) {
            return entity.getActvId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
